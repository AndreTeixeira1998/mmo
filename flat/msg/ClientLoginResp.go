// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package msg

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ClientLoginResp struct {
	_tab flatbuffers.Table
}

func GetRootAsClientLoginResp(buf []byte, offset flatbuffers.UOffsetT) *ClientLoginResp {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ClientLoginResp{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsClientLoginResp(buf []byte, offset flatbuffers.UOffsetT) *ClientLoginResp {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ClientLoginResp{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ClientLoginResp) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ClientLoginResp) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ClientLoginResp) UserId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClientLoginResp) MutateUserId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *ClientLoginResp) Id() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClientLoginResp) MutateId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func ClientLoginRespStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ClientLoginRespAddUserId(builder *flatbuffers.Builder, userId uint64) {
	builder.PrependUint64Slot(0, userId, 0)
}
func ClientLoginRespAddId(builder *flatbuffers.Builder, id uint32) {
	builder.PrependUint32Slot(1, id, 0)
}
func ClientLoginRespEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
